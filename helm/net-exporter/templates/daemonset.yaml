kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: net-exporter
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "labels.selector" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "labels.common" . | nindent 8 }}
      annotations:
        releaseRevision: {{ $.Release.Revision | quote }}
    spec:
      initContainers:
      - name: label-kube-system-namespace
        image: "{{ .Values.image.registry }}/{{ .Values.kubectl.image.name }}:{{ .Values.kubectl.image.tag }}"
        args:
        - label
        - namespace
        - {{ .Values.dns.namespace }}
        - name={{ .Values.dns.namespace }}
        - --overwrite=true
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          {{- with .Values.securityContext }}
            {{- . | toYaml | nindent 10 }}
          {{- end }}
      ## In our Control Plane net-exporter runs on monitoring ns
      ## By design Kubernetes does not allow to run critical pods
      ## having Priority Class like system-node-critical out of
      ## the namespace kube-system
      ##
      ## In the TC, net-exporter runs on kube-system and so this is fine
      priorityClassName: {{ .Values.daemonset.priorityClassName }}
      containers:
      - name: net-exporter
        image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ include "image.tag" . }}"
        args:
          - "-namespace={{ .Release.Namespace }}"
          - "-timeout={{ .Values.timeout }}"
          - "-dns-service={{ .Values.dns.service }}"
          - "-dns-namespace={{ .Values.dns.namespace }}"
          {{- if (.Values.NetExporter.Hosts) }}
          - "-hosts={{ .Values.NetExporter.Hosts }}"
          {{- end }}
          {{- if (.Values.NetExporter.NTPServers) }}
          - "-ntp-servers={{ .Values.NetExporter.NTPServers }}"
          {{- end }}
          {{- if (.Values.NetExporter.DNSCheck.TCP.Disabled) }}
          - "-disable-dns-tcp-check={{ .Values.NetExporter.DNSCheck.TCP.Disabled }}"
          {{- end }}
          {{- if (.Values.NetExporter.Cilium.Enabled) }}
          - "-cilium-enabled={{ .Values.NetExporter.Cilium.Enabled }}"
          {{- end }}
        ports:
          - containerPort: 8000
            name: metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        securityContext:
          {{- with .Values.securityContext }}
            {{- . | toYaml | nindent 10 }}
          {{- end }}
        {{- if .Values.NetExporter.Cilium.Enabled }}
        volumeMounts:
        - mountPath: /sys/fs/bpf
          mountPropagation: HostToContainer
          name: cilium-bpf-maps
        {{- end }}
      serviceAccountName: net-exporter
      securityContext:
        runAsUser: {{ .Values.userID }}
        runAsGroup: {{ .Values.groupID }}
        {{- with .Values.podSecurityContext }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
      tolerations:
      # Tolerate all taints for observability
      - operator: "Exists"
      {{- if .Values.NetExporter.Cilium.Enabled }}
      volumes:
        - name: cilium-bpf-maps
          hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
      {{- end }}